# Название приложения
spring.application.name=chatalyst-backend

# Конфигурация базы данных PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/auth_db
spring.datasource.username=postgres
spring.datasource.password=Alikhancool20
spring.datasource.driver-class-name=org.postgresql.Driver

# Конфигурация JPA/Hibernate
# create-drop: Удаляет и создает схему БД при каждом запуске (ОЧЕНЬ ОСТОРОЖНО В PROD!)
# Для PRODUCTION рекомендуется 'update' (обновляет схему) или 'none' (не трогает схему)
spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.hibernate.ddl-auto=update # Рекомендовано для более поздних стадий разработки/тестирования

# Отображение SQL-запросов в логах (для отладки, отключить в PROD)
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Диалект Hibernate для PostgreSQL (автоматически определяется в Spring Boot 3+, можно удалить)
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Конфигурация JWT
app.jwt.secret=mySecretKey12345678901234567890123456789012345678901234567890
app.jwt.expiration-ms=3600000
# 24 часа в миллисекундах

# Конфигурация сервера
server.port=8080

# Конфигурация Swagger/OpenAPI
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Конфигурация CORS (Cross-Origin Resource Sharing)
# Разрешенные источники для запросов к вашему бэкенду
# Для PRODUCTION замените localhost на домен вашего фронтенда
app.cors.allowed-origins=http://localhost:5173,http://localhost:8080

# --- Gmail SMTP Configuration ---
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.protocol=smtp
spring.mail.username=VerifPharmacy@gmail.com
spring.mail.password=fckcylvuprnhlxjy
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.debug=false

# --- Настройки логирования (для уменьшения вывода в консоль) ---
# Базовый уровень логирования (INFO, WARN, ERROR, FATAL)
logging.level.root=INFO

# Отключаем логи Hibernate SQL-запросов на уровне INFO/DEBUG
logging.level.org.hibernate.SQL=WARN
# SQL-запросы будут выводиться только если они WARN или ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Отключаем предупреждения об устаревших функциях Hibernate (HHH90000025)
logging.level.org.hibernate.orm.deprecation=ERROR

# Отключаем информационные логи о пуле соединений Hibernate (HHH10001005)
logging.level.org.hibernate.orm.connections.pooling=ERROR

# Отключаем информационные логи о JTA Platform (HHH000489)
logging.level.org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator=ERROR

# Отключаем предупреждение Spring Security о UserDetailsService (Global AuthenticationManager...)
logging.level.org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer=ERROR

# Отключаем предупреждение Spring JPA о open-in-view
logging.level.org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration=ERROR

# Отключаем информационные логи вашего DataLoader (Loading roles..., Admin user created...)
logging.level.com.chatalyst.backend.component.DataLoader=WARN

# Отключаем DEBUG логи Jakarta Mail/SMTP
logging.level.jakarta.mail=WARN
logging.level.org.eclipse.angus.mail=WARN

# Управление логами JWT (если хотите убрать ошибки валидации подписи, но это не рекомендуется для продакшена)
# logging.level.com.chatalyst.backend.security.jwt.JwtUtils=ERROR

# --- Telegram Bot & OpenAI Configuration ---
telegram.bot.token=7949155009:AAGjiuWMH71FDS3uo8ZYzi7hdkUk9m_x42Y
openai.api.key=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
openai.model=gpt-3.5-turbo
